const textToCopy = 'function extractPageData() {\n    // Clipboard function - will only work when called from user action\n    function copyToClipboard(text) {\n        return new Promise((resolve, reject) => {\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                navigator.clipboard.writeText(text).then(resolve).catch(err => {\n                    console.error(\'Clipboard API failed, trying fallback:\', err);\n                    fallbackCopyTextToClipboard(text, resolve, reject);\n                });\n            } else {\n                fallbackCopyTextToClipboard(text, resolve, reject);\n            }\n        });\n    }\n\n    function fallbackCopyTextToClipboard(text, resolve, reject) {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        textArea.style.position = \"fixed\";  // Prevent scrolling to bottom\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n\n        try {\n            // This must be called during a user gesture\n            const successful = document.execCommand(\'copy\');\n            document.body.removeChild(textArea);\n            if (successful) {\n                resolve();\n            } else {\n                reject(new Error(\'Fallback copy failed\'));\n            }\n        } catch (err) {\n            document.body.removeChild(textArea);\n            reject(err);\n        }\n    }\n\n    // Date finding function (unchanged)\n    function findClosestDate() {\n        const highlightedItem = document.querySelector(\'.ring-theme-primary\');\n        if (highlightedItem) {\n            const itemGroup = highlightedItem.closest(\'[data-item-group-index]\');\n            if (itemGroup) {\n                const allSiblings = Array.from(itemGroup.parentElement.children);\n                const groupIndex = allSiblings.indexOf(itemGroup);\n                for (let i = groupIndex - 1; i >= 0; i--) {\n                    const sibling = allSiblings[i];\n                    if (sibling.matches(\'div[data-index]\') &&\n                        sibling.classList.contains(\'px-2\') &&\n                        sibling.classList.contains(\'py-1\')) {\n                        return sibling.textContent.trim();\n                    }\n                }\n            }\n        }\n        const dateDivs = document.querySelectorAll(\'div[data-index].px-2.py-1\');\n        return dateDivs.length > 0 ? dateDivs[0].textContent.trim() : null;\n    }\n\n    // Data extraction function (unchanged)\n    function getExtractedDataAsJson() {\n        const extractedData = {\n            \"url\": document.getElementById(\'image-url\')?.value?.trim() || \"\",\n            \"model\": document.querySelector(\'p.font-semibold.text-sm.break-all.hyphens-auto a[href*=\"/model/\"]\')?.textContent?.trim() || \"\",\n            \"Prompt\": \"\",\n            \"Tags\": [],\n            \"LoRA\": {},\n            \"Sampling Method\": document.querySelector(\'div[role=\"combobox\"][aria-expanded=\"false\"].MuiSelect-select\')?.textContent?.trim() || \"\",\n            \"Sampling Steps\": parseInt(document.querySelector(\'input[type=\"number\"].MuiInputBase-input.css-in64xc[min=\"1\"][max=\"50\"]\')?.value) || null,\n            \"CFG Scale\": parseFloat(document.querySelector(\'input[type=\"number\"].MuiInputBase-input.css-in64xc[min=\"1.1\"][max=\"15\"]\')?.value) || null,\n            \"ranking\": 0,\n            \"Date\": findClosestDate()\n        };\n\n        // Prompt extraction\n        const promptTextarea = document.querySelector(\'section textarea[placeholder=\"Enter prompts here\"]\');\n        extractedData.Prompt = promptTextarea?.value?.trim() || Array.from(document.querySelectorAll(\'textarea\'))\n            .find(ta => ta.value?.includes(\',\'))?.value?.trim() || \"\";\n\n        // Tags extraction\n        const tagItems = document.getElementById(\'tags-list\')?.querySelectorAll(\'.tag-item\');\n        if (tagItems?.length > 0) {\n            extractedData.Tags = Array.from(tagItems).map(tag =>\n                tag.textContent.trim().replace(/Ã—$/, \'\').trim().toLowerCase());\n        }\n\n        // LoRA extraction\n        document.querySelectorAll(\'div.relative.flex.gap-3.bg-background-light.p-2.rounded-xl\').forEach(entry => {\n            const title = entry.querySelector(\'a.font-bold.text-sm\')?.textContent?.replace(/&amp;/g, \'&\').trim();\n            const weight = parseFloat(entry.querySelector(\'input[type=\"number\"].MuiInputBase-input\')?.value);\n            if (title && !isNaN(weight)) {\n                extractedData.LoRA[title] = weight;\n            }\n        });\n\n        // Clean empty fields\n        if (Object.keys(extractedData.LoRA).length === 0) delete extractedData.LoRA;\n        if (extractedData.Tags.length === 0) delete extractedData.Tags;\n        if (!extractedData.Date) delete extractedData.Date;\n\n        return JSON.stringify(extractedData, null, 2);\n    }\n\n    // Main function to handle user interaction\n    async function handleExtraction() {\n        const jsonOutput = getExtractedDataAsJson();\n        console.log(\"--- Extracted Data ---\", jsonOutput);\n\n        try {\n            await copyToClipboard(jsonOutput);\n            console.log(\"Data copied to clipboard!\");\n            // showNotification(\"Data copied to clipboard!\"); // Removed this notification\n        } catch (err) {\n            console.error(\"Copy failed:\", err);\n            // showNotification(\"Copy failed! Please manually copy from console.\"); // Removed this notification\n        }\n    }\n\n    function showNotification(message) {\n        const notification = document.createElement(\'div\');\n        notification.textContent = message;\n        notification.style.position = \'fixed\';\n        notification.style.bottom = \'60px\';\n        notification.style.right = \'20px\';\n        notification.style.backgroundColor = \'#4CAF50\';\n        notification.style.color = \'white\';\n        notification.style.padding = \'10px 15px\';\n        notification.style.borderRadius = \'5px\';\n        notification.style.zIndex = \'10000\';\n        document.body.appendChild(notification);\n\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }\n\n    // Create UI button\n    function createCopyButton() {\n        let copyButton = document.getElementById(\'dynamic-copy-button\');\n        if (!copyButton) {\n            copyButton = document.createElement(\'button\');\n            copyButton.id = \'dynamic-copy-button\';\n            copyButton.textContent = \'Copy Image Data\';\n            copyButton.style.position = \'fixed\';\n            copyButton.style.bottom = \'20px\';\n            copyButton.style.right = \'20px\';\n            copyButton.style.zIndex = \'9999\';\n            copyButton.style.padding = \'10px 15px\';\n            copyButton.style.backgroundColor = \'#4CAF50\';\n            copyButton.style.color = \'white\';\n            copyButton.style.border = \'none\';\n            copyButton.style.borderRadius = \'5px\';\n            copyButton.style.cursor = \'pointer\';\n            copyButton.style.boxShadow = \'0 2px 5px rgba(0,0,0,0.2)\';\n\n            copyButton.addEventListener(\'click\', (e) => {\n                e.preventDefault();\n                handleExtraction();\n                copyButton.textContent = \'Copied!\';\n                setTimeout(() => {\n                    copyButton.textContent = \'Copy Image Data\';\n                }, 2000);\n            });\n\n            document.body.appendChild(copyButton);\n        }\n        return copyButton;\n    }\n\n    // Initialize\n    createCopyButton();\n    return getExtractedDataAsJson();\n}\n\nextractPageData(); // Directly call the function'

const copyButton = document.getElementById('copy-quick-entry');
copyButton.addEventListener('click', () => {
    navigator.clipboard.writeText(textToCopy)
        .then(() => {
            console.log('Extractor function copied to clipboard!');
            const originalButtonText = copyButton.textContent;
            copyButton.textContent = 'Copied!';
            setTimeout(() => {
                copyButton.textContent = originalButtonText;
            }, 1500);
        })
        .catch(err => {
            console.error('Failed to copy extractor function:', err);
            alert('Failed to copy. Please try again or copy manually.');
        });
});